%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2423 2423
%%HiResBoundingBox: 0 0 2422.0798 2422.0798
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2422.0798 2422.0798 re
W
q
[0.24 0 0 -0.24 0 2422.0798] cm
q
0 0 10091.666 10091.666 re
W*
q
[3.124679 0 0 3.124679 0 0] cm
/DeviceRGB {} CS
[0.5647 0.2157 0.2863] SC
/DeviceRGB {} cs
[0.5647 0.2157 0.2863] sc
0 0 3229.665 3229.665 re
f
Q
q
[90.048378 0 0 90.048378 358.81479 358.81479] cm
q
0 0 m
0 104.099998 l
104.099998 104.099998 l
104.099998 0 l
0 0 l
h
101.699997 101.699997 m
2.4 101.699997 l
2.4 2.4 l
101.700005 2.4 l
101.699997 101.699997 l
h
W
[104.100001 0 0 104.100001 0.000000045723 -0.00000675618] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.008 mul 0.984 add
1 index 1 exp 0.239 mul 0.69 add
2 index 1 exp -0.055 mul 0.251 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[80.73333 0 0 80.73333 2933.2249 897.00104] cm
q
47.050999 38.525002 m
46.81662 39.462502 46.552948 40.400002 46.201389 41.366802 c
49.394791 41.366802 l
45.674091 52.997803 36.210793 61.434803 23.23279 61.434803 c
9.84379 61.434803 4.62879 52.997303 6.328791 41.366802 c
3.223291 41.366802 l
3.340481 40.400002 3.486961 39.462502 3.692041 38.525002 c
6.797541 25.136002 16.495041 15.556002 30.587042 15.556002 c
44.38604 15.556002 50.069042 25.224003 47.05204 38.525002 c
47.050999 38.525002 l
h
34.188999 41.367001 m
31.024899 41.367001 l
31.317869 40.4002 31.610838 39.4627 31.815918 38.466599 c
35.536617 22.382599 22.558117 22.851599 18.924919 38.525192 c
18.719839 39.550591 18.573359 40.488091 18.426868 41.366993 c
21.590969 41.366993 l
20.06757 53.612991 30.05777 53.348991 34.188969 41.366993 c
34.188999 41.367001 l
h
W
[46.171503 0 0 45.878801 3.22329 15.556001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1.014603 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.008 mul 0.984 add
1 index 1 exp 0.239 mul 0.69 add
2 index 1 exp -0.055 mul 0.251 add
4 3 roll pop 
}
def
0 1.014603 0 axialSH
Q
Q
q
[53.876087 0 0 53.876087 1471.14075 6099.9595] cm
q
5.4 40.040001 m
2.4 40.040001 0 37.600002 0 34.639999 c
0 16.68 l
0 13.72 2.4 11.32 5.4 11.32 c
8.360001 11.32 10.76 13.719999 10.76 16.68 c
10.76 34.639999 l
10.76 37.599998 8.360001 40.040001 5.4 40.040001 c
h
5.4 15.12 m
4.52 15.12 3.84 15.84 3.84 16.68 c
3.84 34.639999 l
3.84 35.52 4.52 36.200001 5.4 36.200001 c
6.24 36.200001 6.96 35.52 6.96 34.639999 c
6.96 16.68 l
6.96 15.84 6.24 15.120001 5.4 15.120001 c
5.4 15.12 l
h
26.120001 39.919998 m
23.16 39.919998 20.76 37.519997 20.76 34.559998 c
20.76 16.799997 l
20.76 13.839997 23.16 11.439997 26.120001 11.439997 c
29.080002 11.439997 31.480001 13.839996 31.480001 16.799997 c
31.480001 18.399998 l
27.680002 18.399998 l
27.680002 16.799997 l
27.680002 15.959997 26.960003 15.239998 26.120003 15.239998 c
25.280003 15.239998 24.560003 15.959998 24.560003 16.799997 c
24.560003 34.559998 l
24.560003 35.399998 25.280003 36.119999 26.120003 36.119999 c
26.960003 36.119999 27.680002 35.399998 27.680002 34.559998 c
27.680002 31.999998 l
31.480001 31.999998 l
31.480001 34.559998 l
31.480001 37.519997 29.080002 39.919998 26.120001 39.919998 c
h
38.880001 40.040001 m
35.880001 40.040001 33.48 37.600002 33.48 34.639999 c
33.48 16.68 l
33.48 13.72 35.880001 11.32 38.880001 11.32 c
41.84 11.32 44.240002 13.719999 44.240002 16.68 c
44.240002 34.639999 l
44.240002 37.599998 41.84 40.040001 38.880001 40.040001 c
h
38.880001 15.12 m
38 15.12 37.32 15.84 37.32 16.68 c
37.32 34.639999 l
37.32 35.52 38 36.200001 38.880001 36.200001 c
39.720001 36.200001 40.440002 35.52 40.440002 34.639999 c
40.440002 16.68 l
40.440002 15.84 39.720001 15.120001 38.880001 15.120001 c
38.880001 15.12 l
h
57.84 11.36 m
64.519997 11.36 l
64.519997 39.919998 l
60.759998 39.919998 l
60.759998 17.319998 l
57.199997 40 l
55.719997 40 l
55.359997 39.919998 l
55.039997 40 l
53.559998 40 l
50.039997 17.32 l
50.039997 39.919998 l
46.239998 39.919998 l
46.239998 11.359999 l
52.959999 11.359999 l
55.399998 27.519999 l
57.84 11.36 l
h
78.120003 11.36 m
84.800003 11.36 l
84.800003 39.919998 l
81.040001 39.919998 l
81.040001 17.319998 l
77.480003 40 l
76 40 l
75.639999 39.919998 l
75.32 40 l
73.839996 40 l
70.32 17.32 l
70.32 39.919998 l
66.519997 39.919998 l
66.519997 11.359999 l
73.239998 11.359999 l
75.68 27.519999 l
78.120003 11.36 l
h
96.120003 24.92 m
90.600006 24.92 l
90.600006 36.200001 l
96.160004 36.200001 l
96.160004 40 l
86.800003 40 l
86.800003 11.440001 l
96.160004 11.440001 l
96.160004 15.240001 l
90.600006 15.240001 l
90.600006 21.120001 l
96.120003 21.120001 l
96.120003 24.92 l
h
109.120003 40.080002 m
105.040001 40.080002 l
102.840004 34.040001 l
101.960007 34.040001 l
101.960007 40.080002 l
98.160004 40.080002 l
98.160004 11.440002 l
104.120003 11.440002 l
106.760002 11.440002 108.880005 13.560002 108.880005 16.200003 c
108.880005 29.280003 l
108.880005 31.000002 108.000008 32.480003 106.640007 33.320004 c
109.120003 40.080002 l
h
101.959999 15.24 m
101.959999 30.24 l
104.120003 30.24 l
104.639999 30.24 105.080002 29.799999 105.080002 29.279999 c
105.080002 16.199999 l
105.080002 15.679998 104.639999 15.239999 104.120003 15.239999 c
101.959999 15.239999 l
101.959999 15.24 l
h
116.480003 39.919998 m
113.520004 39.919998 111.120003 37.519997 111.120003 34.559998 c
111.120003 16.799997 l
111.120003 13.839997 113.520004 11.439997 116.480003 11.439997 c
119.440002 11.439997 121.840004 13.839996 121.840004 16.799997 c
121.840004 18.399998 l
118.040001 18.399998 l
118.040001 16.799997 l
118.040001 15.959997 117.32 15.239998 116.480003 15.239998 c
115.640007 15.239998 114.920006 15.959998 114.920006 16.799997 c
114.920006 34.559998 l
114.920006 35.399998 115.640007 36.119999 116.480003 36.119999 c
117.32 36.119999 118.040001 35.399998 118.040001 34.559998 c
118.040001 31.999998 l
121.840004 31.999998 l
121.840004 34.559998 l
121.840004 37.519997 119.440002 39.919998 116.480003 39.919998 c
h
133.160004 24.92 m
127.640007 24.92 l
127.640007 36.200001 l
133.200012 36.200001 l
133.200012 40 l
123.840012 40 l
123.840012 11.440001 l
133.200012 11.440001 l
133.200012 15.240001 l
127.640015 15.240001 l
127.640015 21.120001 l
133.160019 21.120001 l
133.160019 24.92 l
133.160004 24.92 l
h
W
[133.200017 0 0 28.760003 -0.000000409009 11.319998] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.008 mul 0.984 add
1 index 1 exp 0.239 mul 0.69 add
2 index 1 exp -0.055 mul 0.251 add
4 3 roll pop 
}
def
0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
